extends layout

block scripts
    script.
        //Initializing Autocomplete for Locations
        function initialize() {
      
          var acInputs = document.getElementsByClassName("autocomplete");
            var options = {
              componentRestrictions: {country: 'au'}
            };
          for (var i = 0; i < acInputs.length; i++) {
      
              var autocomplete = new google.maps.places.Autocomplete(acInputs[i], options);
              autocomplete.inputId = acInputs[i].id;

              google.maps.event.addListener(autocomplete, 'place_changed', function () {
              });
          }
        }
        // Global Variables
        var holidays;
        var date = [];
        var rowIndex= 0;
        function add_row(){
          rowIndex ++;
          
          var newRow = '<tr><td><div class="form-group"><input type="text" id="start_date'+rowIndex+'" name="start_date" placeholder="yyyy-mm-dd"  pattern="^\\d{4}-\\d\\d-\\d\\d$"  title="Correct Format e.g 2017-02-14, Year-month-day" required="" autofocus="" class="form-control start_date"></div></td>"'+
                      '<td><div class="form-group"><input type="text" id="end_date'+rowIndex+'" name="end_date" placeholder="yyyy-mm-dd" pattern="^\\d{4}-\\d\\d-\\d\\d$"  title="Correct Format e.g 2017-02-14, Year-month-day" required="" autofocus="" class="form-control end_date"></div></td>"'+
                      '<td><div class="form-group"><input type="text" id="start_time'+rowIndex+'" name="start_time" placeholder="e.g 08:30" pattern="\\d{02}:\\d{02}" title="Correct Format e.g 08:00 or 18:00 in 24 hour time format" required="" class="form-control start_time"></div></td>"'+
                      '<td><div class="form-group"><input type="text" id="end_time'+rowIndex+'"name="end_time" placeholder="e.g 17:30" pattern="\\d{02}:\\d{02}" title="Correct Format e.g 08:00 or 18:00 in 24 hour time format" required="" class="form-control end_time"></div></td>"'+
                      '<td colspan="3"><div class="form-group"><input type="text" id="autocomplete" name="location" placeholder="Enter address select & from dropdown menu" onfocus="initialize()" required="" class="form-control autocomplete"></div></td>"'+
                      '<td><div class="form-group"><input readonly="" id="hours'+rowIndex+'" type="number" name="hours" placeholder="0" required="" class="form-control hours"></div></td>"'+
                      '<td><div class="form-group"><input readonly id="hourly_rate'+rowIndex+'" name="hourly_rate" required="" class="form-control hourly_rate" value="22"></div></td>"'+
                      '<td><div class="form-group"><input readonly="" id="amount'+rowIndex+'" type="number" name="amount" required="" class="form-control amount"></div></td>"'+
                      '<td><div class="form-group"><button id="removerow" type="button" name="removerow'+rowIndex+'" class="negative ui button"><i class="remove icon"></i>Remove</button></div></td></tr>';
  
              $("#shiftTable > tbody:last-child").prev().after(newRow);

        }
        function remove_row(){
          $('#shiftTable  tr:last').remove();
        }
        function calculateTime(sDate, eDate, start_time, end_time, hours_worked, amount, hourly, publicHolidayArray) {
          //get values
          var rate = 0;
          var valuestart = $(start_time).val();
          var valuestop = $(end_time).val();
          var startDate = $(sDate).val();
          var endDate = $(eDate).val();
              
          //calculate hours for user normal    
          var timeStart = new Date(startDate+"T"+valuestart).getTime();
          var timeEnd = new Date(endDate+"T"+valuestop).getTime();
          
          
          var datearray= [];
          // Calculate Public Holiday pay
          //getting dates out of the Holiday array
          for (var i=0; i<publicHolidayArray.length; i++){
            datearray.push(new Date(publicHolidayArray[i].date).getTime());
          }
          // comparing dates to selected dates.
          for (var p = 0; p<datearray.length; p++){
            var pb1 = new Date(startDate).getTime();
            var pb2 = new Date(endDate).getTime();

            if(pb1  === datearray[p] && pb2 != datearray[p]){
              console.log("starting on public holiday");
              var hourDiff = timeEnd - timeStart; //in ms
              // Calculating hours and displaying in hours field
              var hourMin= hourDiff/3600000;
              $(hours_worked).val(hourMin.toFixed(2));
              var s1 = valuestart; 
              var t1 = startDate;
              var d1 = new Date(s1+" "+t1);
              var d2 = new Date(t1+" 24:00:00");
              d1 = moment(d1).format("YYYY-MM-DD HH:mm:ss");
              d2 = moment(d2).format("YYYY-MM-DD HH:mm:ss");
              var diff_ms = moment(d2).diff(moment(d1));
              var dur_obj = moment.duration(diff_ms);
              var hours= dur_obj.asHours().toFixed(2);
              rate = $(hourly).val("30");
              var holidayPay = 30 * hours;
              var s2 = valuestop;
              var t2 = endDate;
              var d3 = new Date(s2+" "+t2);
              var d4 = new Date(t2+" 00:00:00");
              d3 = moment(d3).format("YYYY-MM-DD HH:mm:ss");
              d4 = moment(d4).format("YYYY-MM-DD HH:mm:ss");
              var diff_ms1 = moment(d3).diff(moment(d4));
              var dur_obj1 = moment.duration(diff_ms1);
              var hours2= dur_obj1.asHours().toFixed(2);
              var normalPay = 22 * hours2;
              var totalPay = holidayPay+normalPay;
              $(amount).val(totalPay.toFixed(2));
              return false;
            } 
            if(pb2 === datearray[p] && pb1 != datearray[p]){
              console.log("Ending on public holiday");
              var hourDiff = timeEnd - timeStart; //in ms
              // Calculating hours and displaying in hours field
              var hourMin= hourDiff/3600000;
              $(hours_worked).val(hourMin.toFixed(2));
              var s1 = valuestart; 
              var t1 = startDate;
              var d1 = new Date(s1+" "+t1);
              var d2 = new Date(t1+" 24:00:00");
              d1 = moment(d1).format("YYYY-MM-DD HH:mm:ss");
              d2 = moment(d2).format("YYYY-MM-DD HH:mm:ss");
              var diff_ms = moment(d2).diff(moment(d1));
              var dur_obj = moment.duration(diff_ms);
              var hours= dur_obj.asHours().toFixed(2);
              var holidayPay = 22 * hours;
              var s2 = valuestop;
              var t2 = endDate;
              var d3 = new Date(s2+" "+t2);
              var d4 = new Date(t2+" 00:00:00");
              d3 = moment(d3).format("YYYY-MM-DD HH:mm:ss");
              d4 = moment(d4).format("YYYY-MM-DD HH:mm:ss");
              var diff_ms1 = moment(d3).diff(moment(d4));
              var dur_obj1 = moment.duration(diff_ms1);
              var hours2= dur_obj1.asHours().toFixed(2);
              rate = $(hourly).val("30");
              var normalPay = 30 * hours2;
              var totalPay = holidayPay+normalPay;
              $(amount).val(totalPay.toFixed(2));
              return false;
            }
            if (pb1 && pb2 === datearray[p]){
              console.log("full Public Holiday");
              var hourDiff = timeEnd - timeStart; //in ms
              // Calculating hours and displaying in hours field
              var hourMin= hourDiff/3600000;
              parseFloat(hourMin);
              $(hours_worked).val(hourMin.toFixed(2));
              // Caclulating Pay and displaying in pay field
              rate = $(hourly).val("30");
              var hours_w = $(hours_worked).val();
              var pay = rate * hours_w;
              $(amount).val(pay.toFixed(2));
              
            }else{
              // when compared with the dates, calculate the wages with 30 dollars based on how many hours have been done
              console.log("NOT MATCH");
              var hourDiff = timeEnd - timeStart; //in ms
              // Calculating hours and displaying in hours field
              
              var hourMin= hourDiff/3600000;
              $(hours_worked).val(hourMin.toFixed(2));
              
              // Caclulating Pay and displaying in pay field
              
              rate = $(hourly).val();
              var hours_w = $(hours_worked).val();
              var pay = rate * hours_w;
              $(amount).val(pay.toFixed(2));
            }
          }
        }

        $(document).ready(function(){
           $("#submit").prop("disabled",true);
           $.get( "/holidays/", function( data ) {
              
              holidays = data;
              for(var i=0; i<holidays.length; i++){
                date.push(holidays[i].date);  
              }
              
            });
            // Getting ids of all rows and fields to accurately calculate shifts
            
            var start = "#start_time"+rowIndex;
            var end = "#end_time"+rowIndex;
            var hours = "#hours"+rowIndex;
            var amount = "#amount"+rowIndex;
            var hourly = "#hourly_rate"+rowIndex;
            var start_date= "#start_date"+rowIndex;
            var end_date = "#end_date"+rowIndex;
            $( function() {
              $(start_date).datepicker({dateFormat: "yy-mm-dd"});
              $(end_date).datepicker({dateFormat: "yy-mm-dd"});
            });
            //Calculate pay based on form change
            $("form").change(function(){
              //Call to calculate special pay based on dates
              calculateTime(start_date, end_date, start, end, hours, amount, hourly, holidays);
              // sum all totals
              var sum = 0;
              
              $(".amount").each(function () {
                  if (!isNaN(this.value) && this.value.length != 0) {
                      sum += parseFloat(this.value);
                  }
              });
    
              // show values in total hours and total pay fields
              $("#totalpay").val(sum.toFixed(2));
              var sum1 = 0;
              $(".hours").each(function () {
                  if (!isNaN(this.value) && this.value.length != 0) {
                      sum1 += parseFloat(this.value);
                  }
              });  
              
              $("#total_hours").val(sum1.toFixed(2));
              
            });
            //Validate form based on values entered
            $(".end_date, .end_time").change(function(){
              if ($(start_date).val()<= $(end_date).val()){
                if($(start_date).val() === $(end_date).val()){
                  if($(start).val() > $(end).val() ){
                    $(end).addClass("error");
                    alert("End Time cannot be before start time, Please Enter the right time.");
                  }
                }
              }else{
                $(start_date).addClass("error");
                alert("Start Date cannot be after End Date, Please Enter the right date");
              }
            });
            $(".start_time, .end_time").change(function(){
                var s = $(start).val();
                var e = $(end).val();
                if(!checkTime(s)) return false;
                if(!checkTime(e)) return false;
                return true;
            });
            $("form").change(function(){
              var hrs =$(hours).val();
              if (hrs === ''){
                $("#submit").prop("disabled",true);
                return false;
              } else if(hrs < 0){
                $("#submit").prop("disabled",true);
                return false;
              }else{
                $("#submit").prop("disabled",false);
                return true;
              }
            });
            
        });
            //ADD ROW FUNCTION
            $(document).on('click', '#add_row', function() {
              $("#submit").prop("disabled",true);
              var start = "#start_time"+rowIndex;
              var end = "#end_time"+rowIndex;
              var hours = "#hours"+rowIndex;
              var amount = "#amount"+rowIndex;
              var hourly = "#hourly_rate"+rowIndex;
              var start_date= "#start_date"+rowIndex;
              var end_date = "#end_date"+rowIndex;

              $( function() {
                $(start_date).datepicker({dateFormat: "yy-mm-dd"});
                $(end_date).datepicker({dateFormat: "yy-mm-dd"});
              });
              //Calculate pay on form change 
              $("form").change(function(){
                calculateTime(start_date, end_date, start, end, hours, amount, hourly, holidays);
         
                // sum all totals
                var sum = 0;
                
                $(".amount").each(function () {
                    if (!isNaN(this.value) && this.value.length != 0) {
                        sum += parseFloat(this.value);
                    }
                });
  
                // show values in total hours and total pay fields
                $("#totalpay").val(sum.toFixed(2));
                var sum1 = 0;
                $(".hours").each(function () {
                    if (!isNaN(this.value) && this.value.length != 0) {
                        sum1 += parseFloat(this.value);
                    }
                });  
                
                $("#total_hours").val(sum1.toFixed(2));
                
              });
              //Validate form based on values entered
              $(".end_date, .end_time").change(function(){
                if ($(start_date).val()<= $(end_date).val()){
                  if($(start_date).val() === $(end_date).val()){
                    if($(start).val() > $(end).val() ){
                      $(end).addClass("error");
                      alert("End Time cannot be before start time, Please Enter the right time.");
                    }
                  }
                }else{
                  $(start_date).addClass("error");
                  alert("Start Date cannot be after End Date, Please Enter the right date");
                }
              });
              $(".start_time, .end_time").change(function(){
                var s = $(start).val();
                var e = $(end).val();
                if(!checkTime(s)) return false;
                if(!checkTime(e)) return false;
                return true;
              });
              $("form").change(function(){
                var hrs =$(hours).val();
                if (hrs === ''){
                  $("#submit").prop("disabled",true);
                  return false;
                } else if(hrs < 0){
                  $("#submit").prop("disabled",true);
                  return false;
                }else{
                  $("#submit").prop("disabled",false);
                  return true;
                }
              });
            });
            

            $(document).on('click', '#removerow', function() {
              $(this).parents('tr').remove();
                var sum1 = 0;
                var pos1 = 0;
                $(".hours").each(function () {
                    if (!isNaN(this.value) && this.value.length != 0) {
                        sum1 -= parseFloat(this.value);
                        pos1=-1*sum1;
                    }
                });  
                
                $("#total_hours").val(pos1.toFixed(2));
                var pos = 0;
                var sum = 0;
                $(".amount").each(function () {
                    if (!isNaN(this.value) && this.value.length != 0) {
                        sum -= parseFloat(this.value);
                        pos=-1*sum;
                    }
                });
                $("#totalpay").val(pos.toFixed(2));              
                $("#submit").prop("disabled",false);
            });
          
          
        function checkTime(field){
          var errorMsg = "";
      
          // regular expression to match required time format
          re = /^(\d{1,2}):(\d{2})(:00)?([ap]m)?$/;
      
          if(field.value != '') {
            if(regs = field.match(re)) {
              if(regs[4]) {
                // 12-hour time format with am/pm
                if(regs[1] < 1 || regs[1] > 12) {
                  errorMsg = "Invalid value for hours: " + regs[1];
                }
              } else {
                // 24-hour time format
                if(regs[1] > 23) {
                  errorMsg = "Invalid value for hours: " + regs[1];
                }
              }
              if(!errorMsg && regs[2] > 59) {
                errorMsg = "Invalid value for minutes: " + regs[2];
              }
            } else {
              console.log("INVALID FORMAT");
            }
          }
      
          if(errorMsg != "") {
            alert(errorMsg);
            field.focus();
            return false;
          }
        
            return true;
        }


 
       
block content
  if (!user)
     .ui.raised.very.padded.text.container.segment
       <img class="ui medium image" src="/images/agpLogo.png">
       .ui.warning.message
         i.close.icon
         .header
            | You must register before you can do that!
          |   Visit our registration page, then try again      
        .ui.header Aus Group Protective
        .ui.steps
          a.step(href="/login")
            i.sign.in.icon
            .content
              .title Sign in
              .description Sign Into your Account.
          a.step(href="/register")
            i.add.user.icon
            .content
              .title Sign Up
              .description Sign up for an Account.
  if (user)
    .right.floated.left.aligned.six.wide.column
        .ui.segment
          .ui.left.aligned.header 
            a(href='http://www.pathfinder1.com.au')
              img.ui.small.image(src='/images/agpLogo.png')
      .ui.top.attached.tabular.menu
        a.item(href="/") Home
        a.active.item(href="/pages/add") Add Shifts
        a.item(href="/pages/all") Show All Shifts
        a.item(href="/logout") Logout
        .item 
      .ui.bottom.attached.active.tab.segment 
        .container
        p.lead Hi <strong>#{user.username}</strong>, please add your shift below.
        br
        //form#holiday(action="/holidays/", method="get")
        form(role='form', action="/shifts/add", method="post", style='max-width: 100%;')
          table#shiftTable
            tr 
              th Start Date
              th End Date
              th Start Time
              th End Time
              th(colspan="3") Location  (e.g 570 Bourke Street, Melbourne, Victoria)
              th Hours Done
              th Hourly Rate
              th Pay 
              th
            tbody
              tr  
                td            
                  .form-group
                      input.form-control(type="text", name="start_date", placeholder='yyyy-mm-dd', class="start_date", id="start_date0", pattern='^\\d{4}-\\d\\d-\\d\\d$' , title="Correct Format e.g 2017-02-14, Year-month-day",  required='' autofocus='')
                td            
                  .form-group
                      input.form-control(type="text", name="end_date", placeholder='yyyy-mm-dd', class="end_date", id="end_date0", pattern='^\\d{4}-\\d\\d-\\d\\d$', title="Correct Format e.g 2017-02-14, Year-month-day", required='' autofocus='')                
                td
                  .form-group
                    input.form-control(type='text', id="start_time0",class="start_time", name="start_time", placeholder='e.g 08:30' , pattern='\\d{02}:\\d{02}', title="Correct Format e.g 08:00 or 18:00 in 24 hour time format" required='')
                td
                  .form-group
                    input.form-control(type='text',id="end_time0",class="end_time", name="end_time",placeholder= 'e.g 17:30',pattern='\\d{02}:\\d{02}', title="Correct Format e.g 08:00 or 18:00 in 24 hour time format"  required='')
                td(colspan="3")
                  .form-group
                    input.form-control(type='text', id='autocomplete', name="location", class="autocomplete",placeholder='Enter address select & from dropdown menu', onfocus='initialize()' required='')
                td
                  .form-group
                    input.form-control(readonly type='number',id="hours0",class="hours", name='hours', placeholder='0' required='')
                td
                  .form-group
                    input.form-control(readonly type='number',id="hourly_rate0",class="hourly_rate", name='hourly_rate', value="22",placeholder='0' required='')
                td
                  .form-group
                    input.form-control(readonly type='number',id="amount0",class="amount", name="amount" required='')
                td

                tr
                  th(colspan="7") Total
                  td 
                    .form-group
                      input.form-control(readonly type='number', id="total_hours",name="total_hours", min="0" )
                  td
                  td 
                    .form-group
                      input.form-control(readonly type='number', id="totalpay",name="totalpay",min="0" )
                  td
          a(id="add_row" onclick='add_row();')
            .ui.green.labeled.icon.button
              i.plus.icon
              | Add more shifts
          
          br
          button.btn.btn-default(type='submit' id="submit" ) Submit
          &nbsp;
          a(href='/')
            button.btn.btn-primary(type="button") Back
